# -*- coding: utf-8 -*-
"""1. Pengolahan Citra

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WCAcQYqFoNg1ivLEffVEgHRSnVPB9ssQ
"""

from PIL import Image
import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from google.colab import drive
drive.mount('/content/drive')

# Mengubah Ukuran Citra
def citra_resized(folder_asli, folder_resized, size=(50,50)):
    # Membuat folder untuk menyimpan citra hasil resized
    if not os.path.exists(folder_resized):
        os.makedirs(folder_resized)

    # Mendapatkan daftar file dari folder citra asli
    files = os.listdir(folder_asli)

    for file_name in files:
        # Membuka file citra asli
        citra_path = os.path.join(folder_asli, file_name)
        citra = Image.open(citra_path)

        # Mendapatkan ukuran asli gambar
        pjg_citra, lbr_citra = citra.size

        # Menghitung faktor skala untuk resize manual
        skala_pjg = size[0] / pjg_citra
        skala_lbr = size[1] / lbr_citra

        # Membuat gambar kosong dengan ukuran baru
        citra_resized = Image.new('RGB', size)

        # Menempatkan pixel pada gambar kosong sesuai dengan pixel pada gambar asli
        for x in range(size[0]):
            for y in range(size[1]):
                x_citra = int(x / skala_pjg)
                y_citra = int(y / skala_lbr)
                pixel = citra.getpixel((x_citra, y_citra))
                citra_resized.putpixel((x, y), pixel)

        # Menyimpan citra hasil resized
        output_path = os.path.join(folder_resized, file_name)
        citra_resized.save(output_path)

    # Menampilkan salah satu citra asli dan matriks citra asli yang berisi nilai rgb
    plt.imshow(citra)
    plt.title(f"Citra Asli")
    plt.show()
    print("Matriks Citra Asli (RGB):")
    print(np.array(citra))

    # Menampilkan Contoh Citra Resized
    plt.imshow(citra_resized)
    plt.title(f"Citra Resized")
    plt.show()
    print("\n\n")
    print("Matriks RGB Citra Resized:")
    print(np.array(citra_resized))

# Mengubah Citra Asli Resized menjadi Citra Grayscale
def citra_grayscale(folder_resized, folder_grayscale):
    # Membuat folder untuk menyimpan citra grayscale
    if not os.path.exists(folder_grayscale):
        os.makedirs(folder_grayscale)

    # Mendapatkan daftar file dari folder citra resized
    files = os.listdir(folder_resized)

    for file_name in files:
        # Membuka file citra hasil resized
        citra_resized_path = os.path.join(folder_resized, file_name)
        citra = Image.open(citra_resized_path)

        # Mendapatkan ukuran citra
        width, height = citra.size

        # Membuat citra grayscale baru
        citra_gr = Image.new('L', (width, height))

        # Mengonversi setiap pixel menjadi grayscale
        for x in range(width):
            for y in range(height):
                r, g, b = citra.getpixel((x, y))
                # Konversi ke grayscale menggunakan rumus
                gr = int((0.299 * r) + (0.587 * g) + (0.114 * b))
                citra_gr.putpixel((x, y), gr)

        # Simpan citra grayscale ke folder citra grayscale
        output_path = os.path.join(folder_grayscale, file_name)
        citra_gr.save(output_path)

    # Menampilkan Contoh Citra Grayscale
    plt.imshow(citra_gr, cmap='gray')
    plt.title(f"Citra Grayscale")
    plt.show()
    print("\n\n")
    print("Matriks Citra Grayscale:")
    print(np.array(citra_gr))

# Menghitung Nilai Threshold Setiap Citra Grayscale dengan Metode Mean Threshold
def mean_threshold(citra):
    # Menghitung jumlah piksel dalam citra grayscale
    width, height = citra.size
    jml_piksel = width * height
    threshold = 0

    # Menghitung jumlah nilai intensitas piksel dalam citra grayscale
    for x in range(width):
        for y in range(height):
            threshold += citra.getpixel((x,y))

    # Menghitung nilai rata-rata intensitas piksel
    threshold /= jml_piksel

    return threshold

# Mengubah Citra Grayscale menjadi Citra Biner
def citra_biner(folder_grayscale, folder_biner, folder_matriks):
    # Membuat folder untuk menyimpan citra biner
    if not os.path.exists(folder_biner):
        os.makedirs(folder_biner)

    # Membuat folder untuk menyimpan matriks cinta biner
    if not os.path.exists(folder_matriks):
        os.makedirs(folder_matriks)

    # Mendapatkan daftar file dari folder citra grayscale
    files = os.listdir(folder_grayscale)

    for file_name in files:
        # Membuka citra grayscale
        citra_gr_path = os.path.join(folder_grayscale, file_name)
        citra = Image.open(citra_gr_path)

        # Mendapatkan nilai threshold dari setiap citra grayscale
        threshold = mean_threshold(citra)

        # Mendapatkan ukuran citra grayscale
        width, height = citra.size

        # Membuat matriks citra biner
        matriks_biner = np.zeros((height, width), dtype = int)

        # Mengubah citra grayscale menjadi citra biner
        for x in range(width):
            for y in range(height):
                gr = citra.getpixel((x, y))
                if gr > threshold:
                    matriks_biner[y][x] = 1
                else:
                    matriks_biner[y][x] = 0

        # Menyimpan citra biner ke folder citra biner
        output_path = os.path.join(folder_biner, file_name)
        citra_biner = Image.fromarray(matriks_biner.astype(np.uint8) * 255)
        citra_biner.save(output_path)

        # Menyimpan matriks biner ke file excel ke dalam folder matriks citra biner
        excel_filename = os.path.splitext(file_name)[0] + '.xlsx'
        excel_path = os.path.join(folder_matriks, excel_filename)
        pd.DataFrame(matriks_biner).to_excel(excel_path, index=False, header=False)

    print("\n\n")
    print(f"Nilai threshold untuk {file_name}: {threshold}")

    # Menampilkan Contoh Citra Biner
    plt.imshow(citra_biner, cmap='gray')
    plt.title(f"Citra Biner")
    plt.show()

    # Menampilkn Contoh Matriks Biner
    matriks_biner = pd.read_excel(excel_path, header=None)
    print("Matriks Biner")
    print(matriks_biner)

if __name__ == "__main__":
    folder_asli = '/content/drive/My Drive/Skripsi/Data'
    folder_resized = '/content/drive/My Drive/Skripsi/Output/CitraResized'
    folder_grayscale = '/content/drive/My Drive/Skripsi/Output/CitraGrayscale'
    folder_biner = '/content/drive/My Drive/Skripsi/Output/CitraBiner'
    folder_matriks = '/content/drive/My Drive/Skripsi/Output/MatriksBiner'

citra_resized(folder_asli, folder_resized)

citra_grayscale(folder_resized, folder_grayscale)

citra_biner(folder_grayscale, folder_biner, folder_matriks)